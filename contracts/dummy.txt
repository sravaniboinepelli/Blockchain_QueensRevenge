
======= Auction.sol:Auction =======
Developer Documentation
{
  "details": "All function calls are currently implemented without side effects",
  "methods":
  {
    "Bid(address,uint256,uint256)":
    {
      "params":
      {
        "from": "the address of the person sending the bid, the secret key",
        "secret": "the secret with which the value was hashed to give the hashed value ",
        "value": "the value of the bid as claimed by the sender"
      }
    },
    "endAuction(address)":
    {
      "params":
      {
        "from": "the address of the person requesting the withdrawal     "
      }
    },
    "hashBid(address,bytes32)":
    {
      "params":
      {
        "from": "the address of the person sending the hashed bid ",
        "hashed": "the hash sent to the contract"
      }
    }
  },
  "title": "Contract for sealed bid second bid auction"
}
User Documentation
{
  "methods":
  {
    "Bid(address,uint256,uint256)":
    {
      "notice": "Function that receives the bid after the end of the auction "
    },
    "balanceof()":
    {
      "notice": "Function that returns the balance of the sender"
    },
    "constructor": "Constructor to initialise minPrice of auction, and number of bids in the auction",
    "endAuction(address)":
    {
      "notice": "End auction function that accounts can use to withdraw funds used in the bidding if they failed to win the auction"
    },
    "hashBid(address,bytes32)":
    {
      "notice": "Function that recieves hashed bid"
    }
  }
}

======= BarbossaAuction.sol:BarbossaAuction =======
Developer Documentation
{
  "methods":
  {
    "revealBid(uint256,uint256)":
    {
      "params":
      {
        "secret": "the key with which the value was hashed ",
        "value": "the value of the bid that was hashed"
      }
    },
    "sealedBid(bytes32)":
    {
      "params":
      {
        "hashed": "the hashed bid that the function receives"
      }
    },
    "sendWinningBidToVyperAuction(address)":
    {
      "params":
      {
        "_vyperAuctionContract": "the address of the sealed second bid auction contract"
      }
    }
  }
}
User Documentation
{
  "methods":
  {
    "constructor": "Constructor initialize default values",
    "getmoneyFromVyperAuction()":
    {
      "notice": "Deployer has to call this function after revealWinningBidToVyperAuction() to get money back in case of losing or the difference from ring winner bid value plus vyper second highest bid."
    },
    "revealBid(uint256,uint256)":
    {
      "notice": "Function to reveal bid value and secret used to create the hashed bid value sent during function sealedBid()"
    },
    "revealWinningBidToVyperAuction()":
    {
      "notice": "Deployer has to call this function after sendWinningBidToVyperAuction to reveal bid values  "
    },
    "sealedBid(bytes32)":
    {
      "notice": "Function that receives the sealed bids"
    },
    "sendWinningBidToVyperAuction(address)":
    {
      "notice": "Deployer has to call this function with Address of vyper Auction contract to send winning bid"
    },
    "withDrawMoney()":
    {
      "notice": "Bid losers call this function to get their money back"
    }
  }
}
